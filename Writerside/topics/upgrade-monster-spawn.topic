<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="몬스터 스폰 포인트 개선하기" id="upgrade-monster-spawn">

    <procedure title="단계별 스폰 포인트 정보 분리하기">
        <step>
            <img alt="upgrade-monster-spawn-1.png" src="upgrade-monster-spawn-1.png"/>
            <list>
                <li>현재는 몬스터가 지정된 일정한 시간에 의해서 스폰됩니다.</li>
                <li>하지만, 게임의 난이도가 처음엔 쉬웠다가 점점 어려워 지려면 스폰 시간 간격이 점점 짧아져야 됩니다.</li>
            </list>
        </step>
        <step>
            <img alt="upgrade-monster-spawn-2.png" src="upgrade-monster-spawn-2.png"/>
            <p><path>Scripts | MonsterSpawn</path> 경로에 <path>MonsterSpawnInfo</path> 스크립트를 추가합니다.</p>
        </step>
        <step>
            <code-block lang="c#">
                using UnityEngine;

                public class MonsterSpawnInfo
                {
                    public float spawnInterval;
                }

            </code-block>
            <list>
                <li>해당 스크립트에서 <path>spawnInterval</path> 프로퍼티를 추가합니다.</li>
                <li>클래스의 이름 뒤에 붙어있는 <path>: MonoBehaviour</path> 를 제거합니다.</li>
                <li>게임 오브젝트에 컴포넌트로 추가되는 스크립트가 아니고 단순하게 데이터만 표현하는 클래스일 경우 : MonoBehaviour 를 제거합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections.Generic;
                using UnityEngine;

                public class MonsterSpawnPoint : MonoBehaviour
                {
                    public List<MonsterSpawnInfo> spawnInfos;
                    public string monsterId;
                    public float interval;

                    private float _timer;

                    private void Update()
                    {
                        _timer += Time.deltaTime;
                        if (_timer > interval)
                        {
                            _timer = 0f;
                            SpawnMonster();
                        }
                    }

                    private void SpawnMonster()
                    {
                        var monster = MonsterManager.instance.GenerateMonster(monsterId);
                        monster.transform.position = transform.position;
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>MonsterSpawnPoint 스크립트에 spawnInfos 프로퍼티를 추가합니다.</li>
                <li>스폰 정보에 대한 리스트를 가지고 있습니다.</li>
            </list>
        </step>
        <step>
            <img alt="upgrade-monster-spawn-3.png" src="upgrade-monster-spawn-3.png"/>
            <p>리스트로 추가한 프로퍼티가 public 인데도 불구하고 인스펙터에서 보이지 않습니다.</p>
        </step>
        <step>
            <code-block lang="c#">
                using System;

                [Serializable]
                public class MonsterSpawnInfo
                {
                    public float spawnInterval;
                }

            </code-block>
            <list>
                <li>MonsterSpawnInfo 클래스 이름 위에 <path>[Serializable]</path> 을 추가해줍니다.</li>
                <li>이 부분은 해당 클래스를 <path>직렬화</path> 시키는 클래스로 변환시키는 부분입니다.</li>
                <li>기본적으로 클래스는 인스펙터에서 보이지 않지만, 직렬화된 클래스는 인스펙터에 보이고 값을 조정할 수 있습니다.</li>
            </list>
        </step>
        <step>
            <img alt="upgrade-monster-spawn-4.png" src="upgrade-monster-spawn-4.png"/>
            <list>
                <li>이제 인스펙터에서 spawnInfos 프로퍼티의 값을 설정할 수 있습니다.</li>
                <li>해당 항목은 리스트이기 때문에 + 와 - 버튼으로 리스트 요소를 추가하고 제거할 수 있습니다.</li>
                <li>시간 간격의 값을 간단하게 추가합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                using System;

                [Serializable]
                public class MonsterSpawnInfo
                {
                    public float startTime;
                    public float spawnInterval;
                }

            </code-block>
            <list>
                <li>시간이 지나면 스폰 시간 간격이 짧아지도록 추가한 값인데, 얼만큼 시간이 지나면 지정된 스폰 시간 간격으로 줄일지에 대한 변수가 필요합니다.</li>
                <li>MonsterSpawnInfo 클래스에 startTime 프로퍼티를 추가합니다.</li>
            </list>
        </step>
        <step>
            <img alt="upgrade-monster-spawn-5.png" src="upgrade-monster-spawn-5.png"/>
            <list>
                <li>인스펙터에서 startTime 에 대한 값도 지정해줍니다.</li>
                <li>위와 같은 경우, 처음(0초)에는 스폰 간격이 5초 이고 20초의 시간이 지나면 스폰 간격이 4초로 짧아지는 구조를 표현한것입니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                using System;

                [Serializable]
                public class MonsterSpawnInfo
                {
                    public float startTime;
                    public float spawnInterval;
                    public string monsterId;
                }

            </code-block>
            <list>
                <li>MonsterSpawnInfo 클래스에 monsterId 프로퍼티도 추가합니다.</li>
                <li>시간이 지날수록 강한 몬스터를 스폰하기 위함입니다.</li>
            </list>
        </step>
        <step>
            <img alt="upgrade-monster-spawn-6.png" src="upgrade-monster-spawn-6.png"/>
            <list>
                <li>위와 같이 monsterId 항목도 인스펙터에서 설정합니다.</li>
                <li>따라서, 처음에는 0번 몬스터가 스폰되다가 시간이 지나 20초가 되면 1번 몬스터가 스폰되는 구조입니다.</li>
            </list>
        </step>
    </procedure>

    <procedure title="Time.time 알아보기">
        <step>
            <list>
                <li>리스트가 된 스폰 포인트 정보의 startTime 프로퍼티는 총 게임 진행시간에 관련된 값입니다.</li>
                <li>총 게임 진행시간이 지정된 값을 넘어가면 해당 스폰 포인트 정보가 활성화되는 형태입니다.</li>
                <li>따라서, 총 게임 진행시간 값이 필요합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections.Generic;
                using UnityEngine;

                public class MonsterSpawnPoint : MonoBehaviour
                {
                    public List<MonsterSpawnInfo> spawnInfos;
                    public string monsterId;
                    public float interval;
    
                    private float _timer;
    
                    private void Update()
                    {
                        Debug.Log(Time.time);
                        _timer += Time.deltaTime;
                        if (_timer > interval)
                        {
                            _timer = 0f;
                            SpawnMonster();
                        }
                    }
    
                    private void SpawnMonster()
                    {
                        var monster = MonsterManager.instance.GenerateMonster(monsterId);
                        monster.transform.position = transform.position;
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>MonsterSpawnPoint 스크립트 Update 매서드에 Time.time 을 로그로 찍는 코드를 추가합니다.</li>
                <li>해당 값을 매 프레임마다 로그로 찍게 됩니다.</li>
            </list>
        </step>
        <step>
            <img alt="upgrade-monster-spawn-7.png" src="upgrade-monster-spawn-7.png"/>
            <list>
                <li>로그를 보면 처음에 0이었던 값이 점차 증가하는 것을 볼 수 있습니다.</li>
                <li>해당 값은 게임이 진행되는 시간을 초 단위로 출력해주는 값입니다.</li>
                <li>따라서, 스폰 포인트가 활성화되는 startTime 의 기준으로 Time.time 값을 사용하면 됩니다.</li>
            </list>
        </step>
    </procedure>

    <procedure title="foreach 문 알아보기">
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections.Generic;
                using UnityEngine;

                public class MonsterSpawnPoint : MonoBehaviour
                {
                    public List<MonsterSpawnInfo> spawnInfos;
                    public string monsterId;
                    public float interval;

                    private float _timer;

                    private void Start()
                    {
                        foreach (var spawnInfo in spawnInfos)
                        {
                            Debug.Log($"{spawnInfo.startTime} : {spawnInfo.spawnInterval} : {spawnInfo.monsterId}");
                        }
                    }

                    private void Update()
                    {
                        _timer += Time.deltaTime;
                        if (_timer > interval)
                        {
                            _timer = 0f;
                            SpawnMonster();
                        }
                    }

                    private void SpawnMonster()
                    {
                        var monster = MonsterManager.instance.GenerateMonster(monsterId);
                        monster.transform.position = transform.position;
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>spawnInfos 프로퍼티는 리스트이고, 이제 해당 리스트 내부의 항목들을 순회하면서 startTime 을 넘겨서 활성화된 스폰 포인트를 찾아야합니다.</li>
                <li>위와 같은 리스트 변수는 <path>foreach</path> 문을 사용하여 쉽게 순회할 수 있습니다.</li>
                <li>Start 문에 foreach 를 사용하는 로직을 추가하고, 각 항목에 대한 로그를 출력하는 코드를 추가합니다.</li>
            </list>
        </step>
        <step>
            <img alt="upgrade-monster-spawn-8.png" src="upgrade-monster-spawn-8.png"/>
            <list>
                <li>두 항목에 대한 로그가 출력된 것을 볼 수 있습니다.</li>
                <li>이제 각 항목을 순회할 수 있으니 해당 스폰 포인트가 활성화 상태인지 확인해야 합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections.Generic;
                using UnityEngine;

                public class MonsterSpawnPoint : MonoBehaviour
                {
                    public List<MonsterSpawnInfo> spawnInfos;
                    public string monsterId;
                    public float interval;

                    private float _timer;

                    private void Update()
                    {
                        MonsterSpawnInfo activeSpawnInfo;
                        foreach (var spawnInfo in spawnInfos)
                        {
                            if (Time.time > spawnInfo.startTime)
                            {
                                activeSpawnInfo = spawnInfo;
                            }
                        }

                        _timer += Time.deltaTime;
                        if (_timer > interval)
                        {
                            _timer = 0f;
                            SpawnMonster();
                        }
                    }

                    private void SpawnMonster()
                    {
                        var monster = MonsterManager.instance.GenerateMonster(monsterId);
                        monster.transform.position = transform.position;
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>활성화된 스폰 포인트를 찾는 부분은 매번 체크해야 하므로 Update 쪽으로 옮깁니다.</li>
                <li>총 진행 시간(Time.time)이 스폰 포인트에 지정된 시간(startTime)을 초과할 경우, 해당 스폰 포인트가 활성화 됩니다.</li>
                <li>startTime 값이 짧은 스폰 정보부터 foreach 에서 먼저 순회하기 때문에 위와 같이 진행하면, 가장 마지막의 활성화된 스폰 포인트가 activeSpawnInfo 에 할당됩니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                private void Update()
                {
                    MonsterSpawnInfo activeSpawnInfo = null;
                    foreach (var spawnInfo in spawnInfos)
                    {
                        if (Time.time > spawnInfo.startTime)
                        {
                            activeSpawnInfo = spawnInfo;
                        }
                    }

                    if (activeSpawnInfo == null)
                        return;

                    _timer += Time.deltaTime;
                    if (_timer > interval)
                    {
                        _timer = 0f;
                        SpawnMonster();
                    }
                }
            </code-block>
            <list>
                <li>최초에 activeSpawnInfo 변수는 null 을 지정해줍니다. 타입 추론이 불가능한 상황이라 타입을 명확하게 명시해줍니다.</li>
                <li>해당 로직 아래에서 activeSpawnInfo 변수를 사용하여 쿨타임 계산도 하고 지정된 몬스터를 스폰할 예정인데, 활성화된 스폰 포인트를 아무것도 찾지 못할 수도 있습니다.</li>
                <li>그런 경우에는 할당된 값이 없어 처음 그대로 null 값이 세팅되어 있을 것입니다.</li>
                <li>활성화 된 것이 없을 경우에는 아래 로직을 이어서 진행하지 못하도록 <path>return</path> 조건을 추가합니다.</li>
                <li>return 을 시키면 이후의 로직을 진행하지 않게 됩니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections.Generic;
                using UnityEngine;

                public class MonsterSpawnPoint : MonoBehaviour
                {
                    public List<MonsterSpawnInfo> spawnInfos;

                    private float _timer;

                    private void Update()
                    {
                        MonsterSpawnInfo activeSpawnInfo = null;
                        foreach (var spawnInfo in spawnInfos)
                        {
                            if (Time.time > spawnInfo.startTime)
                            {
                                activeSpawnInfo = spawnInfo;
                            }
                        }

                        if (activeSpawnInfo == null)
                            return;

                        _timer += Time.deltaTime;
                        if (_timer > activeSpawnInfo.spawnInterval)
                        {
                            _timer = 0f;
                            SpawnMonster(activeSpawnInfo.monsterId);
                        }
                    }

                    private void SpawnMonster(string monsterId)
                    {
                        var monster = MonsterManager.instance.GenerateMonster(monsterId);
                        monster.transform.position = transform.position;
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>활성화된 스폰 포인트를 찾은 경우, 해당 스폰 포인트에 지정된 값을 사용하는 로직을 추가합니다.</li>
                <li>기존의 interval 과 monsterId 프로퍼티는 이제 사용하지 않으므로 제거합니다.</li>
            </list>
        </step>
    </procedure>
</topic>