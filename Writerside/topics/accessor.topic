<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="접근자" id="accessor">

    <list>
        <li>프로퍼티와 메서드는 접근자를 가지고 접근에 대한 권한을 설정할 수 있습니다.</li>
        <li>접근자에는 <path>private</path> 과 <path>public</path> 이 있습니다.</li>
        <li>그동안에는 접근자를 포함해서 프로퍼티와 메서드를 선언하지 않았으며, 이 때는 기본적으로 private 이 지정됩니다.</li>
    </list>

    <procedure title="public 프로퍼티">
        <step>
            <code-block lang="c#">
                using System.Collections;
                using System.Collections.Generic;
                using Unity.Collections.LowLevel.Unsafe;
                using UnityEngine;

                public class TestScript : MonoBehaviour
                {
                    public int _number1;
                    private int _number2;

                    // Start is called before the first frame update
                    void Start()
                    {
                        Debug.Log(_number1);
                        Debug.Log(_number2);
                    }

                    // Update is called once per frame
                    void Update()
                    {
                    }

                    int Sum(int num1, int num2)
                    {
                        return num1 + num2;
                    }
                }
            </code-block>
            <p>public 으로 변수 _number1, private 으로 변수 _number2 를 선언합니다.</p>
        </step>
        <step>
            <img alt="accessor-1.png" src="accessor-1.png"/>
            <p>실행 시, int 형 변수의 기본값인 0으로 설정된 변수 _number1과 _number2의 로그가 출력됩니다.</p>
        </step>
        <step>
            <img alt="accessor-2.png" src="accessor-2.png"/>
            <p>하이어라키 윈도우에서 <path>Empty</path> 오브젝트를 선택해보면, TestScript 에 Number1 이라는 입력 항목이 추가된 것을 볼 수 있습니다.</p>
        </step>
        <step>
            <img alt="accessor-3.png" src="accessor-3.png"/>
            <p>값을 입력하고, 유니티를 다시 실행해 봅니다.</p>
        </step>
        <step>
            <img alt="accessor-4.png" src="accessor-4.png"/>
            <p>_number1 의 값이 입력한 값으로 로그가 출력되는 것을 볼 수 있습니다.</p>
        </step>
        <step>
            <list>
                <li>따라서, 변수를 public 으로 설정하면, 인스펙터 윈도우에서 해당 값을 조정할 수 있습니다.</li>
                <li>고정된 값이 아니라 외부에서 변경하면서 확인해보고 싶은 프로퍼티를 public 으로 설정할 수 있습니다.</li>
            </list>
        </step>
    </procedure>

    <procedure title="클래스 프로퍼티">
        <step>
            <code-block lang="c#">
                using System.Collections;
                using System.Collections.Generic;
                using UnityEngine;

                public class NewClass : MonoBehaviour
                {
                    public TestScript _testScript;

                    // Start is called before the first frame update
                    void Start()
                    {
                        Debug.Log("NewClass");
                    }

                    // Update is called once per frame
                    void Update()
                    {

                    }
                }
            </code-block>
            <p>클래스는 int 나 string 과 같이 변수 또는 프로퍼티의 타입이 될 수 있습니다.</p>
        </step>
        <step>
            <img alt="accessor-6.png" src="accessor-6.png"/>
            <list>
                <li>public 으로 지정한 TestScript 프로퍼티에 TestScript 스크립트를 가지고 있는 Empty 게임 오브젝트를 지정할 수 있습니다.</li>
                <li>인스펙터 윈도우의 해당 항목으로 Empty 오브젝트를 드래그하여 지정할 수 있습니다.</li>
            </list>
        </step>
    </procedure>

    <procedure title="public 메서드">
        <step>
            <code-block lang="c#">
                using System.Collections;
                using System.Collections.Generic;
                using Unity.Collections.LowLevel.Unsafe;
                using UnityEngine;

                public class TestScript : MonoBehaviour
                {
                    public int _number1;
                    private int _number2;

                    // Start is called before the first frame update
                    void Start()
                    {
                        Debug.Log(_number1);
                        Debug.Log(_number2);
                    }

                    // Update is called once per frame
                    void Update()
                    {
                    }

                    public int Sum(int num1, int num2)
                    {
                        return num1 + num2;
                    }

                    private int Minus(int num1, int num2)
                    {
                        return num1 - num2;
                    }
                }
            </code-block>
            <p>위 코드와 같이 Sum 메서드와 Minus 메서드를 각각 public, private 으로 지정합니다.</p>
        </step>
        <step>
            <code-block lang="c#">
                using System.Collections;
                using System.Collections.Generic;
                using UnityEngine;

                public class NewClass : MonoBehaviour
                {
                    public TestScript _testScript;

                    // Start is called before the first frame update
                    void Start()
                    {
                        _testScript.Sum(1, 3);
                        _testScript.Minus // Error
                    }

                    // Update is called once per frame
                    void Update()
                    {

                    }
                }
            </code-block>
            <list>
                <li>프로퍼티로 연결된 NewClass 에서는 외부 클래스인 TestScript 의 메서드를 호출할 수 있습니다.</li>
                <li>하지만, public 메서드만 호출이 가능하며, private 메서드는 호출이 불가능 합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                using System.Collections;
                using System.Collections.Generic;
                using UnityEngine;

                public class NewClass : MonoBehaviour
                {
                    public TestScript _testScript;

                    // Start is called before the first frame update
                    void Start()
                    {
                        Debug.Log(_testScript._number1);
                        Debug.Log(_testScript._number2);    // Error
                    }

                    // Update is called once per frame
                    void Update()
                    {

                    }
                }
            </code-block>
            <p>프로퍼티 역시 public 은 외부에서 접근이 가능하지만, private 은 접근이 불가능합니다.</p>
        </step>
    </procedure>
</topic>