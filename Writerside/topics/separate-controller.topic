<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="컨트롤러 분리하기" id="separate-controller">

    <list>
        <li>현재는 HeroController 에서 이동의 기능과 애니메이션 재생의 기능을 모두 하고 있습니다.</li>
        <li>하지만, 이동이나 애니메이션의 기능은 캐릭터 뿐만 아니라 몬스터에서도 사용될 기능입니다.</li>
        <li>유니티 오브젝트의 컴포넌트와 같이 기능에 따라 스크립트를 분리하고 재사용하도록 구성하면 게임을 유지보수하는데 도움이 됩니다.</li>
    </list>

    <procedure title="스크립트 추가하기">
        <step>
            <img alt="separate-controller.png" src="separate-controller.png"/>
            <p>Scripts 에 Character 폴더를 추가하고, AnimationController, MoveController 스크립트를 추가합니다.</p>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                ...

                public class HeroController : MonoBehaviour
                {
                    private MoveController _moveController;
                    private AnimationController _animationController;
                    private Animator _anim;
                    private bool _isMoving;

                    void Start()
                    {
                        _moveController = gameObject.AddComponent<MoveController>();
                        _animationController = gameObject.AddComponent<AnimationController>();
                        _anim = GetComponentInChildren<Animator>();
                    }

                    ...
                }
                ]]>
            </code-block>
            <list>
                <li>_moveController 와 _animationController 프로퍼티를 추가합니다.</li>
                <li>이번에는 오브젝트에 컴포넌트 추가해서 사용하지 않고, 코드에서 컴포넌트를 동적으로 추가해서 사용하도록 작성하겠습니다.</li>
                <li>컴포넌트 추가는 gameObject.AddComponent 매서드를 사용해서 작성이 가능합니다.</li>
            </list>
        </step>
        <step>
            <img alt="seprate-controller-3.png" src="seprate-controller-3.png"/>
            <p>실행 시, hero 오브젝트에 MoveController 와 AnimationController 스크립트 컴포넌트가 추가되는 것을 확인할 수 있습니다.</p>
        </step>
        <step>
            <code-block lang="c#">
                public class MoveController : MonoBehaviour
                {
                    public void OnStart()
                    {

                    }
                }
            </code-block>
            <code-block lang="c#">
                public class AnimationController : MonoBehaviour
                {
                    public void OnStart()
                    {

                    }
                }
            </code-block>
            <list>
                <li>두 스크립트에 Init 이름의 매서드를 추가합니다.</li>
                <li>각 컨트롤러에서 초기화를 진행시킬 함수입니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                ...

                public class HeroController : MonoBehaviour
                {
                    private MoveController _moveController;
                    private AnimationController _animationController;
                    private Animator _anim;
                    private bool _isMoving;

                    void Start()
                    {
                        _moveController = gameObject.AddComponent<MoveController>();
                        _animationController = gameObject.AddComponent<AnimationController>();
                        _moveController.OnStart();
                        _animationController.OnStart();
                        _anim = GetComponentInChildren<Animator>();
                    }

                    ...
                    }
                ]]>
            </code-block>
            <list>
                <li>AddComponent 로 컴포넌트를 추가한 이후에 OnStart 매서드를 호출하여, 각 컴포넌트의 초기화를 진행해줍니다.</li>
                <li>각 컴포넌트 스크립트의 Start 매서드에서 초기화를 진행해도 되지만, 초기화의 순서를 명시적으로 해주기 위해 별도의 함수에서 초기화를 진행하였습니다.</li>
            </list>
        </step>
    </procedure>

    <procedure title="기능 분리하기">
        <step>
            <code-block lang="c#">
                <![CDATA[
                ...

                public class MoveController : MonoBehaviour
                {
                    public void OnStart()
                    {

                    }

                    public void OnUpdate(float horizontal, float vertical)
                    {
                        var direction = new Vector3(horizontal, vertical, 0f);
                        transform.position += direction * Time.deltaTime;

                        if (horizontal != 0f)
                        {
                            transform.localScale = new Vector3(horizontal < 0f ? -1f : 1f, 1f, 1f);
                        }
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>OnUpdate 이름의 매서드를 추가하고, HeroController 의 이동에 관한 로직을 붙여넣기 합니다.</li>
                <li>이번에도 Update 라이프사이클 매서드 안에서도 순서를 보장하기 위해 별도의 OnUpdate 매서드를 추가한 것입니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                ...

                public class HeroController : MonoBehaviour
                {
                    private MoveController _moveController;
                    private AnimationController _animationController;
                    private Animator _anim;
                    private bool _isMoving;

                    ...

                    void Update()
                    {
                        var horizontal = Input.GetAxis("Horizontal");
                        var vertical = Input.GetAxis("Vertical");
                        _moveController.OnUpdate(horizontal, vertical);

                        var isMoving = horizontal != 0f || vertical != 0f;
                        if (_isMoving != isMoving)
                        {
                            _isMoving = isMoving;
                            _anim.Play(_isMoving ? "Move" : "Idle");
                        }
                    }
                }
            </code-block>
            <p>이제 HeroController 에서 이동 부분은 _moveController.OnUpdate 매서드를 호출하는 로직으로 변경합니다.</p>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections;
                using System.Collections.Generic;
                using UnityEngine;

                public class AnimationController : MonoBehaviour
                {
                    private Animator _anim;
                    private bool _isMoving;

                    public void OnStart()
                    {
                        _anim = GetComponentInChildren<Animator>();
                    }

                    public void OnUpdate(float horizontal, float vertical)
                    {
                        var isMoving = horizontal != 0f || vertical != 0f;
                        if (_isMoving != isMoving)
                        {
                            _isMoving = isMoving;
                            _anim.Play(_isMoving ? "Move" : "Idle");
                        }
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>이번에는 HeroController 의 애니메이션 재생 관련 로직을 AnimationController 에 붙여넣기 합니다.</li>
                <li>GetComponentInChildren 를 호출하던 초기화 로직은 OnStart 로 옮깁니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections;
                using System.Collections.Generic;
                using UnityEngine;

                public class HeroController : MonoBehaviour
                {
                    private MoveController _moveController;
                    private AnimationController _animationController;

                    void Start()
                    {
                        _moveController = gameObject.AddComponent<MoveController>();
                        _animationController = gameObject.AddComponent<AnimationController>();
                        _moveController.OnStart();
                        _animationController.OnStart();
                    }

                    void Update()
                    {
                        var horizontal = Input.GetAxis("Horizontal");
                        var vertical = Input.GetAxis("Vertical");
                        _moveController.OnUpdate(horizontal, vertical);
                        _animationController.OnUpdate(horizontal, vertical);
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>HeroController 로직에서 _animationController 를 사용하도록 변경합니다.</li>
                <li>애니메이션 재생에 사용되던 프로퍼티 _anim 과 _isMoving 도 이제 사용하지 않기 때문에 제거해줍니다.</li>
            </list>
        </step>
    </procedure>

    <procedure title="이동속도 적용하기">
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections;
                using System.Collections.Generic;
                using UnityEngine;

                public class MoveController : MonoBehaviour
                {
                    private float _speed;

                    public void OnStart(float speed)
                    {
                        _speed = speed;
                    }

                    public void OnUpdate(float horizontal, float vertical)
                    {
                        var direction = new Vector3(horizontal, vertical, 0f);
                        transform.position += direction * Time.deltaTime * _speed;

                        if (horizontal != 0f)
                        {
                            transform.localScale = new Vector3(horizontal < 0f ? -1f : 1f, 1f, 1f);
                        }
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>이동속도를 적용하기 위해 float 타입의 _speed 프로퍼티를 추가합니다.</li>
                <li>position 을 변경해줄때 _speed 를 곱해주면, 지금보다 _speed 배 빠르게 캐릭터가 이동합니다.</li>
                <li>_speed 는 OnStart 매서드에서 초기화해줄때 매개변수로 받도록 합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections;
                using System.Collections.Generic;
                using UnityEngine;

                public class HeroController : MonoBehaviour
                {
                    private MoveController _moveController;
                    private AnimationController _animationController;
    
                    void Start()
                    {
                        _moveController = gameObject.AddComponent<MoveController>();
                        _animationController = gameObject.AddComponent<AnimationController>();
                        _moveController.OnStart(3f);
                        _animationController.OnStart();
                    }
    
                    void Update()
                    {
                        var horizontal = Input.GetAxis("Horizontal");
                        var vertical = Input.GetAxis("Vertical");
                        _moveController.OnUpdate(horizontal, vertical);
                        _animationController.OnUpdate(horizontal, vertical);
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>HeroController 에서 _moveController 를 초기화해줄때, 이동속도를 리터럴로 전달해주겠습니다.</li>
                <li>실행 시, 이전보다 지정한 이동속도만큼 빠르게 이동하는 것을 확인할 수 있습니다.</li>
            </list>
        </step>
        <step>
            <img alt="separate-controller-4.png" src="separate-controller-4.png"/>
            <list>
                <li>이동속도는 캐릭터의 능력치로 능력치는 이후에 점점 더 많아지게 될 것입니다.</li>
                <li>따라서, 능력치들을 모아놓는 스크립트를 별도로 추가하도록 하겠습니다.</li>
                <li>Script | Hero 경로에 HeroData 이름의 스크립트를 추가합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                using System.Collections;
                using System.Collections.Generic;
                using UnityEngine;

                public class HeroData : MonoBehaviour
                {
                    public float speed;
                }
            </code-block>
            <p>HeroData 코드에는 이동속도를 나타내는 float 타입의 speed 프로퍼티 하나를 추가합니다.</p>
        </step>
        <step>
            <img alt="separate-controller-5.png" src="separate-controller-5.png"/>
            <list>
                <li>HeroData 의 프로퍼티는 인스펙터에서 설정해주는 것이 편리하기 때문에 스크립트 컴포넌트로 추가합니다.</li>
                <li>speed 프로퍼티의 값을 변경합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="c#">
                <![CDATA[
                using System.Collections;
                using System.Collections.Generic;
                using UnityEngine;

                public class HeroController : MonoBehaviour
                {
                    private HeroData _data;
                    private MoveController _moveController;
                    private AnimationController _animationController;

                    void Start()
                    {
                        _data = gameObject.GetComponent<HeroData>();
                        _moveController = gameObject.AddComponent<MoveController>();
                        _animationController = gameObject.AddComponent<AnimationController>();
                        _moveController.OnStart(_data.speed);
                        _animationController.OnStart();
                    }

                    void Update()
                    {
                        var horizontal = Input.GetAxis("Horizontal");
                        var vertical = Input.GetAxis("Vertical");
                        _moveController.OnUpdate(horizontal, vertical);
                        _animationController.OnUpdate(horizontal, vertical);
                    }
                }
                ]]>
            </code-block>
            <list>
                <li>HeroData 타입의 _data 프로퍼티를 추가합니다.</li>
                <li>HeroData 는 오브젝트에 컴포넌트로 추가했기 때문에, gameObject.GetComponent 매서드를 사용하여 해당 컴포넌트를 가져옵니다.</li>
                <li>이제 _moveController.OnStart 매서드로 이동속도를 전달해줄때, 리터럴이 아닌 _data.speed 프로퍼티에 접근하여 인스펙터에서 설정시킨 값을 전달합니다.</li>
            </list>
        </step>
        <step>
            <p>실행 시, 지정된 이동속도만큼 캐릭터가 빠르게 이동하는 모습을 볼 수 있습니다.</p>
        </step>
    </procedure>
</topic>